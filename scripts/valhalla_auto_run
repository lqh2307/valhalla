#!/usr/bin/env python3

from pathlib import Path
import subprocess
import argparse
import logging
import sys
import os

# Config logs
LOGGER = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)5s: %(message)s"))
LOGGER.addHandler(handler)
LOGGER.setLevel(logging.INFO)

# Config args
parser = argparse.ArgumentParser(
  description="""Script to auto run valhalla"""
)

parser.add_argument(
  "-u",
  "--url",
  help="OSM osm.pbf file URL",
  type=str,
)
parser.add_argument(
  "-i",
  "--input-osm-files",
  type=str,
  help="Input OSM osm.pbf file paths, separated by space"
)
parser.add_argument(
  "-n",
  "--num-processes",
  type=int,
  default=1,
  help="Number of processes for the Valhalla service"
)
parser.add_argument(
  "-p",
  "--prefix",
  help="Prefix of path to the data folders",
  type=Path,
  default="data",
)
parser.add_argument(
  "-a",
  "--build-admin",
  help="Build admin database",
  action="store_true",
  default=False,
)
parser.add_argument(
  "-l",
  "--build-landmarks",
  help="Build landmarks database",
  action="store_true",
  default=False,
)

def run_command(command: str):
  LOGGER.info(f"Running command: {command}...")

  try:
    subprocess.run(command, check=True, shell=True)
  except Exception as e:
    LOGGER.error(f"Failed to run command: {command}: {e}.")

    return False

  return True


if __name__ == "__main__":
  args = parser.parse_args()

  # Auto run
  LOGGER.info(f"<===============> Creating data folders... <===============>")
  res = run_command(f"valhalla_create_data_folders -p {args.prefix}")
  if not res:
    sys.exit(1)

  LOGGER.info(f"<===============> Creating config file... <===============>")
  res = run_command(f"valhalla_create_config -p {args.prefix}")
  if not res:
    sys.exit(1)

  if args.url:
    LOGGER.info(f"<===============> Get OSM osm.pbf file... <===============>")
    res = run_command(f"valhalla_get_osm_pbf -f -p {args.prefix} -u {args.url}")
    if not res:
      sys.exit(1)

  input_osm_file_path = None
  if args.input_osm_files:
    input_osm_file_path = args.input_osm_files
  else:
    input_osm_file_path = " ".join([str(Path(f"{args.prefix}/osms/{file_name}")) for file_name in os.listdir(Path(f"{args.prefix}/osms"))])

  config_file_path = Path(f"{args.prefix}/valhalla.json")

  if args.build_admin:
    LOGGER.info(f"<===============> Building admins database... <===============>")
    run_command(f"valhalla_build_admins -c {config_file_path} {input_osm_file_path}")

  if args.build_landmarks:
    LOGGER.info(f"<===============> Building landmarks database... <===============>")
    run_command(f"valhalla_build_landmarks -c {config_file_path} {input_osm_file_path}")

  LOGGER.info(f"<===============> Building tiles... <===============>")
  res = run_command(f"valhalla_build_tiles -c {config_file_path} {input_osm_file_path}")
  if not res:
    sys.exit(1)

  LOGGER.info(f"<===============> Building tiles extract... <===============>")
  res = run_command(f"valhalla_build_extract -d -p {args.prefix}")
  if not res:
    sys.exit(1)

  LOGGER.info(f"<===============> Starting service... <===============>")
  res = run_command(f"valhalla_service {config_file_path} {args.num_processes}")
  if not res:
    sys.exit(1)
