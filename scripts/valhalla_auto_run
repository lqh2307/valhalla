#!/usr/bin/env python3

from pathlib import Path
import subprocess
import argparse
import logging
import signal
import sys
import os

# Config logs
LOGGER = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)5s: %(message)s"))
LOGGER.addHandler(handler)
LOGGER.setLevel(logging.INFO)

# Config args
parser = argparse.ArgumentParser(
  description="""Script to auto run valhalla"""
)

parser.add_argument(
  "--url",
  help="OSM osm.pbf file URL",
  type=str,
)
parser.add_argument(
  "--name",
  help="OSM osm.pbf file name",
  type=str,
)
parser.add_argument(
  "--input-files",
  type=str,
  help="Input OSM osm.pbf file paths, separated by space"
)
parser.add_argument(
  "--num-processes",
  type=int,
  default=1,
  help="Number of processes for the Valhalla service"
)
parser.add_argument(
  "--prefix",
  help="Prefix of path to the data folders",
  type=Path,
  default="data",
)
parser.add_argument(
  "--start-service",
  help="Start service",
  action="store_true",
  default=False,
)
parser.add_argument(
  "--build-datas",
  help="Build data",
  action="store_true",
  default=False,
)
parser.add_argument(
  "--create-data-folders",
  help="Create data folders",
  action="store_true",
  default=False,
)


if __name__ == "__main__":
  signal.signal(signal.SIGINT, lambda sig, frame: (
    LOGGER.info(f"Received \"SIGINT\" signal. Exitting..."),

    sys.exit(0)
  ))

  signal.signal(signal.SIGTERM, lambda sig, frame: (
    LOGGER.info(f"Received \"SIGTERM\" signal. Exitting..."),

    sys.exit(0)
  ))

  args = parser.parse_args()

  if args.create_data_folders:
    try:
      command = f"valhalla_create_data_folders --force --prefix {args.prefix}"

      LOGGER.info(f"<===============> Creating data folders: {command}... <===============>")

      subprocess.run(command, check=True, shell=True)
    except Exception as e:
      LOGGER.error(f"Failed to creating data folders: {e}")

      sys.exit(1)

  if args.url:
    try:
      command = f"valhalla_get_osm_pbf --force --prefix {args.prefix} --url {args.url}"

      if args.name:
        command = f"{command} --name {args.name}"

      LOGGER.info(f"<===============> Getting OSM osm.pbf file: {command}... <===============>")

      subprocess.run(command, check=True, shell=True)
    except Exception as e:
      LOGGER.error(f"Failed to getting OSM osm.pbf file: {e}")

      sys.exit(1)

  if args.build_datas:
    config_file_path = Path(f"{args.prefix}/valhalla.json")
    input_osm_file_path = None
    if args.input_files:
      input_osm_file_path = args.input_files
    else:
      input_osm_file_path = " ".join([str(Path(f"{args.prefix}/osms/{file_name}")) for file_name in os.listdir(Path(f"{args.prefix}/osms"))])

    try:
      command = f"valhalla_build_admins -c {config_file_path} {input_osm_file_path}"

      LOGGER.info(f"<===============> Building admins database: {command}... <===============>")

      subprocess.run(command, check=True, shell=True)
    except Exception as e:
      LOGGER.error(f"Failed to building admins database: {e}")

      sys.exit(1)

    try:
      command = f"valhalla_build_landmarks -c {config_file_path} {input_osm_file_path}"

      LOGGER.info(f"<===============> Building landmarks database: {command}... <===============>")

      subprocess.run(command, check=True, shell=True)
    except Exception as e:
      LOGGER.error(f"Failed to building landmarks database: {e}")

      sys.exit(1)

    try:
      command = f"valhalla_build_tiles -c {config_file_path} {input_osm_file_path}"

      LOGGER.info(f"<===============> Building tiles: {command}... <===============>")

      subprocess.run(command, check=True, shell=True)
    except Exception as e:
      LOGGER.error(f"Failed to building tiles: {e}")

      sys.exit(1)

    try:
      command = f"valhalla_build_extract --delete-tiles --prefix {args.prefix}"

      LOGGER.info(f"<===============> Building tiles extract: {command}... <===============>")

      subprocess.run(command, check=True, shell=True)
    except Exception as e:
      LOGGER.error(f"Failed to building tiles extract: {e}")

      sys.exit(1) 

  if args.start_service:
    config_file_path = Path(f"{args.prefix}/valhalla.json")

    try:
      command = f"valhalla_service {config_file_path} {args.num_processes}"

      LOGGER.info(f"<===============> Starting service: {command}... <===============>")

      subprocess.run(command, check=True, shell=True)
    except Exception as e:
      LOGGER.error(f"Failed to starting service: {e}")

      sys.exit(1) 
