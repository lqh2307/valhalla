#!/usr/bin/env python3

import subprocess
import logging
import sys
import os

# Config logs
LOGGER = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)5s: %(message)s"))
LOGGER.addHandler(handler)
LOGGER.setLevel(logging.INFO)

def set_default_env_var(var_name, default_value):
  if var_name not in os.environ:
    os.environ[var_name] = default_value

def run_command(command):
  LOGGER.info(f"Running {command}...")

  try:
    subprocess.run(command, check=True, shell=True)
  except Exception as e:
    LOGGER.error(f"Failed to run command {command}: {e}.")

    return False

  return True

if __name__ == "__main__":
  # Init ENVs with defaults if not set
  set_default_env_var('VALHALLA_INPUT_OSM_FILES', ' '.join([os.path.join('data/osm/', file) for file in os.listdir('data/osm/')]))
  set_default_env_var('VALHALLA_ELEVATION_BOUNDING_BOX', "96,4,120,28")
  set_default_env_var('VALHALLA_SERVICE_NUM_PROCESSES', str(os.cpu_count()))
  set_default_env_var('VALHALLA_CONFIG_FILE_PATH', 'data/valhalla/valhalla.json')

  input_osm_files = os.environ['VALHALLA_INPUT_OSM_FILES']
  elevation_bounding_box = os.environ['VALHALLA_ELEVATION_BOUNDING_BOX']
  service_num_processes = os.environ['VALHALLA_SERVICE_NUM_PROCESSES']
  config_file_path = os.environ['VALHALLA_CONFIG_FILE_PATH']

  # Auto run
  LOGGER.info(f"[1/8] ==========> Building config...")
  res = run_command(f"valhalla_build_config > {config_file_path}")
  if not res:
    sys.exit(1)

  LOGGER.info(f"[2/8] ==========> Building timezone...")
  run_command(f"valhalla_build_timezone -c {config_file_path}")

  LOGGER.info(f"[3/8] ==========> Building landmarks using {input_osm_files}...")
  run_command(f"valhalla_build_landmarks -c {config_file_path} {input_osm_files}")

  LOGGER.info(f"[4/8] ==========> Building admins using {input_osm_files}...")
  run_command(f"valhalla_build_admins -c {config_file_path} {input_osm_files}")

  LOGGER.info(f"[5/8] ==========> Building elevation with bounding box {elevation_bounding_box}...")
  run_command(f"valhalla_build_elevation -c {config_file_path} -b {elevation_bounding_box}")

  LOGGER.info(f"[6/8] ==========> Building tiles using {input_osm_files}...")
  res = run_command(f"valhalla_build_tiles -c {config_file_path} {input_osm_files}")
  if not res:
    sys.exit(1)

  LOGGER.info(f"[7/8] ==========> Building extract...")
  res = run_command(f"valhalla_build_extract -c {config_file_path}")
  if not res:
    sys.exit(1)

  LOGGER.info(f"[8/8] ==========> Starting service with {service_num_processes} processes...")
  res = run_command(f"valhalla_service {config_file_path} {service_num_processes}")
  if not res:
    sys.exit(1)
