#!/usr/bin/env python3

from pathlib import Path
import requests
import argparse
import logging
import shutil
import sys
import re

# Config logs
LOGGER = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)5s: %(message)s"))
LOGGER.addHandler(handler)
LOGGER.setLevel(logging.INFO)

# Config args
parser = argparse.ArgumentParser(
  description="""Script to download OSM osm.pbf file""",
)

parser.add_argument(
  "-u",
  "--url",
  help="OSM osm.pbf file URL.",
  type=str,
)
parser.add_argument(
  "-f",
  "--force",
  action="store_true",
  help="Force delete all existing OSM osm.pbf files and redownload",
  default=False,
)
parser.add_argument(
  "-p",
  "--prefix",
  help="Prefix of path to the data folders",
  type=Path,
  default="data",
)


if __name__ == "__main__":
  args = parser.parse_args()

  if not args.url:
    LOGGER.error("No OSM osm.pbf file URL specified.")

    sys.exit(1)
  else:
    osms_dir_path = Path(f"{args.prefix}/osms")

    if args.force:
      if osms_dir_path.is_dir():
        for item in osms_dir_path.iterdir():
          if item.is_dir():
            shutil.rmtree(item)
          else:
            item.unlink()

    try:
      LOGGER.info(f"Downloading OSM osm.pbf file from {args.url}...")

      with requests.get(args.url) as r:
        r.raise_for_status()

        osm_file_name = Path(args.url).name
        content_disposition = r.headers.get('content-disposition')
        if content_disposition:
          file_name_match = re.findall('filename="(.+)"', content_disposition)
          if file_name_match:
            file_name = file_name_match[0]

        osm_pbf_file_path = Path(f"{args.prefix}/osms/{osm_file_name}")

        with open(osm_pbf_file_path, 'wb') as f:
          f.write(r.content)
    except Exception as e:
      LOGGER.error(f"Failed to downloading OSM osm.pbf file from {args.url}: {e}.")

      sys.exit(1)
