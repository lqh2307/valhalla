#!/usr/bin/env python3

from pathlib import Path
import argparse
import logging
import shutil
import json
import sys
import os

# Config logs
LOGGER = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)5s: %(message)s"))
LOGGER.addHandler(handler)
LOGGER.setLevel(logging.INFO)

# Config args
parser = argparse.ArgumentParser(
  description="""Script to create or delete data folders and config file""",
)

parser.add_argument(
  "--delete",
  action="store_true",
  help="Delete all data folders",
  default=False,
)
parser.add_argument(
  "--force",
  action="store_true",
  help="Force delete all existing data folders and recreate",
  default=False,
)
parser.add_argument(
  "--prefix",
  help="Prefix of path to the data folders",
  type=Path,
  default="data",
)


if __name__ == "__main__":
  args = parser.parse_args()

  if args.delete:
    try:
      LOGGER.info(f"Deleting data folders and config file at {args.prefix}...")

      shutil.rmtree(args.prefix)
    except Exception as e:
      LOGGER.error(f"Failed to deleting data folders and config file at {args.prefix}: {e}")

      sys.exit(1)

    LOGGER.info(f"Finished to deleting data folders and config file at {args.prefix}")
  else:
    config = {
      "mjolnir": {
        "max_cache_size": 1000000000,
        "id_table_size": 1300000000,
        "use_lru_mem_cache": False,
        "lru_mem_cache_hard_control": False,
        "use_simple_mem_cache": False,
        "concurrency": os.cpu_count(),
        "tile_dir": f"{args.prefix}/tiles",
        "tile_extract": f"{args.prefix}/tiles/tiles.tar",
        "traffic_extract": f"{args.prefix}/traffic/traffic.tar",
        "admin": f"{args.prefix}/admin/admin.sqlite",
        "landmarks": f"{args.prefix}/landmarks/landmarks.sqlite",
        "timezone": "data/timezone/timezone.sqlite",
        "transit_dir": f"{args.prefix}/transit",
        "transit_feeds_dir": f"{args.prefix}/transit_feeds",
        "transit_pbf_limit": 20000,
        "hierarchy": True,
        "shortcuts": True,
        "include_platforms": False,
        "include_driveways": True,
        "include_construction": False,
        "include_bicycle": True,
        "include_pedestrian": True,
        "include_driving": True,
        "import_bike_share_stations": False,
        "global_synchronized_cache": False,
        "max_concurrent_reader_users": 1,
        "reclassify_links": True,
        "data_processing": {
          "infer_internal_intersections": True,
          "infer_turn_channels": True,
          "apply_country_overrides": True,
          "grid_divisions_within_tile": 32,
          "use_admin_db": True,
          "use_direction_on_ways": False,
          "allow_alt_name": False,
          "use_urban_tag": False,
          "use_rest_area": False,
          "scan_tar": False,
        },
        "logging": {
          "type": "std_out",
          "color": True,
          "file_name": f"{args.prefix}/logs/mjolnir_log.txt",
        },
      },
      "additional_data": {
        "elevation": "data/elevation_tiles",
      },
      "loki": {
        "actions": [
          "locate",
          "route",
          "height",
          "sources_to_targets",
          "optimized_route",
          "isochrone",
          "trace_route",
          "trace_attributes",
          "transit_available",
          "expansion",
          "centroid",
          "status",
        ],
        "use_connectivity": True,
        "service_defaults": {
          "radius": 0,
          "minimum_reachability": 50,
          "search_cutoff": 35000,
          "node_snap_tolerance": 5,
          "street_side_tolerance": 5,
          "street_side_max_distance": 1000,
          "heading_tolerance": 60,
        },
        "logging": {
          "type": "std_out",
          "color": True,
          "file_name": f"{args.prefix}/logs/loki_log.txt",
          "long_request": 100.0,
        },
        "service": {
          "proxy": "ipc:///tmp/loki",
        },
      },
      "thor": {
        "logging": {
          "type": "std_out",
          "color": True,
          "file_name": f"{args.prefix}/logs/thor_log.txt",
          "long_request": 110.0,
        },
        "source_to_target_algorithm": "select_optimal",
        "service": {
          "proxy": "ipc:///tmp/thor",
        },
        "max_reserved_labels_count_astar": 2000000,
        "max_reserved_labels_count_bidir_astar": 1000000,
        "max_reserved_labels_count_dijkstras": 4000000,
        "max_reserved_labels_count_bidir_dijkstras": 2000000,
        "costmatrix_check_reverse_connection": False,
        "costmatrix_allow_second_pass": False,
        "max_reserved_locations_costmatrix": 25,
        "clear_reserved_memory": False,
        "extended_search": False,
      },
      "odin": {
        "logging": {
          "type": "std_out",
          "color": True,
          "file_name": f"{args.prefix}/logs/odin_log.txt",
        },
        "service": {
          "proxy": "ipc:///tmp/odin",
        },
        "markup_formatter": {
          "markup_enabled": False,
          "phoneme_format": "<TEXTUAL_STRING> (<span class=<QUOTES>phoneme<QUOTES>>/<VERBAL_STRING>/</span>)",
        },
      },
      "meili": {
        "mode": "auto",
        "customizable": [
          "mode",
          "search_radius",
          "turn_penalty_factor",
          "gps_accuracy",
          "interpolation_distance",
          "sigma_z",
          "beta",
          "max_route_distance_factor",
          "max_route_time_factor",
        ],
        "verbose": False,
        "default": {
          "sigma_z": 4.07,
          "gps_accuracy": 5.0,
          "beta": 3,
          "max_route_distance_factor": 5,
          "max_route_time_factor": 5,
          "max_search_radius": 100,
          "breakage_distance": 2000,
          "interpolation_distance": 10,
          "search_radius": 50,
          "geometry": False,
          "route": True,
          "turn_penalty_factor": 0,
        },
        "auto": {
          "turn_penalty_factor": 200,
          "search_radius": 50,
        },
        "pedestrian": {
          "turn_penalty_factor": 100,
          "search_radius": 50,
        },
        "bicycle": {
          "turn_penalty_factor": 140,
        },
        "multimodal": {
          "turn_penalty_factor": 70,
        },
        "logging": {
          "type": "std_out",
          "color": True,
          "file_name": f"{args.prefix}/logs/meili_log.txt",
        },
        "service": {
          "proxy": "ipc:///tmp/meili",
        },
        "grid": {
          "size": 500,
          "cache_size": 100240,
        },
      },
      "httpd": {
        "service": {
          "listen": "tcp://*:8002",
          "loopback": "ipc:///tmp/loopback",
          "interrupt": "ipc:///tmp/interrupt",
          "drain_seconds": 28,
          "shutdown_seconds": 1,
          "timeout_seconds": -1,
        }
      },
      "service_limits": {
        "auto": {
          "max_distance": 5000000.0,
          "max_locations": 20,
          "max_matrix_distance": 400000.0,
          "max_matrix_location_pairs": 2500,
        },
        "bus": {
          "max_distance": 5000000.0,
          "max_locations": 50,
          "max_matrix_distance": 400000.0,
          "max_matrix_location_pairs": 2500,
        },
        "taxi": {
          "max_distance": 5000000.0,
          "max_locations": 20,
          "max_matrix_distance": 400000.0,
          "max_matrix_location_pairs": 2500,
        },
        "pedestrian": {
          "max_distance": 250000.0,
          "max_locations": 50,
          "max_matrix_distance": 200000.0,
          "max_matrix_location_pairs": 2500,
          "min_transit_walking_distance": 1,
          "max_transit_walking_distance": 10000,
        },
        "motor_scooter": {
          "max_distance": 500000.0,
          "max_locations": 50,
          "max_matrix_distance": 200000.0,
          "max_matrix_location_pairs": 2500,
        },
        "motorcycle": {
          "max_distance": 500000.0,
          "max_locations": 50,
          "max_matrix_distance": 200000.0,
          "max_matrix_location_pairs": 2500,
        },
        "bicycle": {
          "max_distance": 500000.0,
          "max_locations": 50,
          "max_matrix_distance": 200000.0,
          "max_matrix_location_pairs": 2500,
        },
        "multimodal": {
          "max_distance": 500000.0,
          "max_locations": 50,
          "max_matrix_distance": 0.0,
          "max_matrix_location_pairs": 0,
        },
        "status": {
          "allow_verbose": False,
        },
        "transit": {
          "max_distance": 500000.0,
          "max_locations": 50,
          "max_matrix_distance": 200000.0,
          "max_matrix_location_pairs": 2500,
        },
        "truck": {
          "max_distance": 5000000.0,
          "max_locations": 20,
          "max_matrix_distance": 400000.0,
          "max_matrix_location_pairs": 2500,
        },
        "skadi": {
          "max_shape": 750000,
          "min_resample": 10.0,
        },
        "isochrone": {
          "max_contours": 4,
          "max_time_contour": 120,
          "max_distance": 25000.0,
          "max_locations": 1,
          "max_distance_contour": 200,
        },
        "trace": {
          "max_distance": 200000.0,
          "max_gps_accuracy": 100.0,
          "max_search_radius": 100.0,
          "max_shape": 16000,
          "max_alternates": 3,
          "max_alternates_shape": 100,
        },
        "bikeshare": {
          "max_distance": 500000.0,
          "max_locations": 50,
          "max_matrix_distance": 200000.0,
          "max_matrix_location_pairs": 2500,
        },
        "centroid": {
          "max_distance": 200000.0,
          "max_locations": 5,
        },
        "max_exclude_locations": 50,
        "max_reachability": 100,
        "max_radius": 200,
        "max_timedep_distance": 500000,
        "max_timedep_distance_matrix": 0,
        "max_alternates": 2,
        "max_exclude_polygons_length": 10000,
        "max_distance_disable_hierarchy_culling": 0,
      },
    }

    try:
      if args.force:
        if Path(args.prefix).exists() and Path(args.prefix).is_dir():
          shutil.rmtree(args.prefix)

      LOGGER.info(f"Creating data folders and config file at {args.prefix}...")

      for dir in ["osms", "tiles", "transit", "traffic", "landmarks", "admin", "timezone", "transit_feeds", "elevation_tiles", "logs"]:
        Path(f"{args.prefix}/{dir}").mkdir(parents=True, exist_ok=True)

      configFilePath = Path(f"{args.prefix}/valhalla.json")

      with open(configFilePath, "w") as f:
        json.dump(config, f, sort_keys=True, indent=2)
    except Exception as e:
      LOGGER.error(f"Failed to creating data folders and config file at {args.prefix}: {e}")

      sys.exit(1)

    LOGGER.info(f"Finished to creating data folders and config file at {args.prefix}")
