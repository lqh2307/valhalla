#!/usr/bin/env python3

import subprocess
import requests
import argparse
import logging
import zipfile
import shutil
import json
import sys
from pathlib import Path

parser = argparse.ArgumentParser(description="""Script to download and process timezone polygon file.""")
parser.add_argument(
  "-f",
  "--force",
  action="store_true",
  help="Delete existing files and redownload.",
  default=False,
)
parser.add_argument(
  "-u",
  "--url",
  type=str,
  help="URL of the timezone polygon file to download.",
  default="https://github.com/evansiroky/timezone-boundary-builder/releases/download/2024a/timezones-with-oceans.shapefile.zip",
)
parser.add_argument(
  "-c",
  "--config",
  help="Absolute or relative path to the Valhalla config JSON.",
  type=Path,
)

LOGGER = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)5s: %(message)s"))
LOGGER.addHandler(handler)
LOGGER.setLevel(logging.INFO)

timezones = "timezones"
timezones_zip_file = Path(f"{timezones}/{timezones}.zip")
timezones_unzip_folder = Path(f"{timezones}/{timezones}")

def download_file(url, dest):
  LOGGER.info(f"Downloading from {url} to {dest}...")

  try:
    with requests.get(url, stream=True) as r:
      r.raise_for_status()

      with open(dest, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1*1024*1024):
          f.write(chunk)
  except Exception as e:
    LOGGER.error(f"Failed to download from {url}: {e}.")

    return False

  return True

def unzip_file(zip_path, extract_to):
  LOGGER.info(f"Unzipping {zip_path} to {extract_to}...")

  try:
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
      zip_ref.extractall(extract_to)
  except Exception as e:
    LOGGER.error(f"Failed to unzip {zip_path} to {extract_to}: {e}.")

    return False

  return True  

def find_shapefile(directory):
  for file in directory.glob("*.shp"):
    return file.stem

  return None

def create_spatial_database(src, dest):
  LOGGER.info(f"Creating spatial database from {src}...")

  try:
    shapefile_file_name = find_shapefile(src)
    if shapefile_file_name is None:
      raise ValueError(f"No shapefile found in {src}.")

    dest = str(dest)
    shapefile = f"{src}/{shapefile_file_name}"

    subprocess.run(["spatialite_tool", "-i", "-shp", shapefile, "-d", dest, "-t", timezones, "-s", "4326", "-g", "geom", "-c", "UTF-8"], check=True)
    subprocess.run(["spatialite", dest, f"SELECT CreateSpatialIndex('{timezones}', 'geom');"], check=True)
    subprocess.run(["spatialite", dest, "VACUUM;"], check=True)
    subprocess.run(["spatialite", dest, "ANALYZE;"], check=True)

    shutil.rmtree(src)
  except Exception as e:
    LOGGER.error(f"Failed to create spatial database from {src}: {e}.")

    return False

  return True

if __name__ == "__main__":
  args = parser.parse_args()

  if not args.config:
    LOGGER.critical("No valid config file used.")

    sys.exit(1)

  config = None
  with open(args.config) as f:
    config = json.load(f)

  timezones_sqlite_file = config["mjolnir"].get("timezone")
  if not timezones_sqlite_file:
    LOGGER.critical(f"'Can't find valid path for 'mjolnir.timezone' in {args.config}.")

    sys.exit(1)

  if args.force:
    res = download_file(args.url, timezones_zip_file)
    if not res:
      sys.exit(1)
  else:
    if not timezones_zip_file.exists():
      LOGGER.error(f"Timezone polygon file {timezones_zip_file} is not found.")
  
      sys.exit(1)

  res = unzip_file(timezones_zip_file, timezones_unzip_folder)
  if not res:
    sys.exit(1)

  res = create_spatial_database(timezones_unzip_folder, timezones_sqlite_file)
  if not res:
    sys.exit(1)
