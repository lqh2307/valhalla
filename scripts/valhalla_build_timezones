#!/usr/bin/env python3

from pathlib import Path
import subprocess
import requests
import argparse
import logging
import zipfile
import shutil
import json
import sys

# Config args
parser = argparse.ArgumentParser(description="""Script to download and process timezone file.""")

parser.add_argument(
  "-f",
  "--force",
  action="store_true",
  help="Force delete existing timezone file and redownload.",
  default=False,
)

method = parser.add_mutually_exclusive_group()

method.add_argument(
  "-c",
  "--config",
  help="Path to the Valhalla config JSON file.",
  type=Path,
)
method.add_argument(
  "-o",
  "--output",
  help="Path to output timezone database file.",
  type=Path,
)

# Config logs
LOGGER = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)5s: %(message)s"))
LOGGER.addHandler(handler)
LOGGER.setLevel(logging.INFO)


if __name__ == "__main__":
  args = parser.parse_args()

  tz_polygon_db_file_path = None
  if args.output:
    tz_polygon_db_file_path = Path(args.output)
  elif args.config:
    config = None
    with open(args.config, 'r') as f:
      config = json.load(f)

    if not config["mjolnir"]["timezone"]:
      LOGGER.error(f"'Can't find path for output timezone database file in {args.config}.")

      sys.exit(1)
    else:
      tz_polygon_db_file_path = Path(config["mjolnir"]["timezone"])
  else:
    LOGGER.error("No output timezone database file specified.")

    sys.exit(1)

  tz_polygon_zip_file_path = tz_polygon_db_file_path.with_suffix(".zip")
  if not args.force:
    if not tz_polygon_zip_file_path.exists():
      LOGGER.error(f"Missing timezone polygon zip file {zip_file}.")

      sys.exit(1)

    LOGGER.info(f"Found timezone polygon zip file {zip_file}.")
  else:
    tzPolygonFileURL = "https://github.com/evansiroky/timezone-boundary-builder/releases/download/2024a/timezones-with-oceans.shapefile.zip"

    LOGGER.info(f"Downloading timezone polygon zip file from {tzPolygonFileURL} to {zip_file}...")

    try:
      with requests.get(tzPolygonFileURL) as r:
        r.raise_for_status()

        with open(zip_file, 'wb') as f:
          f.write(r.content)
    except Exception as e:
      LOGGER.error(f"Failed to download timezone zip file from {tzPolygonFileURL} to {zip_file}: {e}.")

      sys.exit(1)

  tz_polygon_unzip_dir_path = tz_polygon_db_file_path.with_suffix("")
  try:
    LOGGER.info(f"Unzipping timezone polygon zip file {tz_polygon_zip_file_path} to {tz_polygon_unzip_dir_path}...")

    with zipfile.ZipFile(tz_polygon_zip_file_path, "r") as z:
      z.extractall(tz_polygon_unzip_dir_path)
  except Exception as e:
    LOGGER.error(f"Failed to unzipping timezone file {tz_polygon_zip_file_path} to {tz_polygon_unzip_dir_path}: {e}.")

    sys.exit(1)

  try:
    LOGGER.info(f"Creating timezone polygon database file from {tz_polygon_unzip_dir_path}...")

    if tz_polygon_db_file_path.exists():
      LOGGER.info(f"Deleting existing timezone polygon database file {tz_polygon_db_file_path}...")

      tz_polygon_db_file_path.unlink()

    tz_polygon_shp_file_name = None
    for file in tz_polygon_unzip_dir_path.glob("*.shp"):
      tz_polygon_shp_file_name = file.name

    if tz_polygon_shp_file_name is None:
      LOGGER.error(f"No timezone polygon shapefile found in {tz_polygon_unzip_dir_path}.")

      sys.exit(1)

    subprocess.run(["spatialite_tool", "-i", "-shp", f"{tz_polygon_unzip_dir_path}/{tz_polygon_shp_file_name}", "-d", str(tz_polygon_db_file_path), "-t", "timezones", "-s", "4326", "-g", "geom", "-c", "UTF-8"], check=True)
    subprocess.run(["spatialite", str(tz_polygon_db_file_path), f"SELECT CreateSpatialIndex('timezones', 'geom');"], check=True)
    subprocess.run(["spatialite", str(tz_polygon_db_file_path), "VACUUM;"], check=True)
    subprocess.run(["spatialite", str(tz_polygon_db_file_path), "ANALYZE;"], check=True)

    shutil.rmtree(tz_polygon_unzip_dir_path)
  except Exception as e:
    LOGGER.error(f"Failed to creating timezone polygon database file from {tz_polygon_unzip_dir_path}: {e}.")

    sys.exit(1)
