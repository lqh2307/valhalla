#!/usr/bin/env python3

import logging
import shutil
import sys
import json
import requests
import zipfile
import subprocess
from pathlib import Path
import argparse

parser = argparse.ArgumentParser(description="""Script to download and process timezone polygon file.""")
parser.add_argument(
  "-f",
  "--force",
  action="store_true",
  help="Delete existing files and redownload.",
  default=False,
)
parser.add_argument(
  "-u",
  "--url",
  type=str,
  help="URL of the timezone polygon file to download.",
  default="https://github.com/evansiroky/timezone-boundary-builder/releases/download/2024a/timezones-with-oceans.shapefile.zip",
)
parser.add_argument(
  "-c",
  "--config",
  help="Absolute or relative path to the Valhalla config JSON.",
  type=Path,
)

LOGGER = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)5s: %(message)s"))
LOGGER.addHandler(handler)
LOGGER.setLevel(logging.INFO)

timezones = "timezones"
timezones_zip_file = f"{timezones}/{timezones}.zip"
timezones_unzip_folder = f"{timezones}/{timezones}"
timezones_sqlite_file = f"{timezones}/{timezones}.sqlite"

def download_file(url, dest):
  LOGGER.info(f"Downloading {url} to {dest}...")

  with requests.get(url, stream=True) as r:
    r.raise_for_status()

    with open(dest, 'wb') as f:
      for chunk in r.iter_content(chunk_size=1*1024*1024):
        f.write(chunk)

def unzip_file(zip_path, extract_to):
  LOGGER.info(f"Unzipping {zip_path} to {extract_to}...")

  with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_to)

def find_shapefile(directory):
  for file in directory.glob("*.shp"):
    return file.stem

  return None

def create_spatial_database(dest):
  LOGGER.info("Creating spatial database...")

  shapefile_file_name = find_shapefile(Path(timezones_unzip_folder))
  if shapefile_file_name is None:
    LOGGER.critical(f"No shapefile found in {timezones_unzip_folder}")

    sys.exit(1)

  shapefile = f"{timezones_unzip_folder}/{shapefile_file_name}"

  subprocess.run(["spatialite_tool", "-i", "-shp", shapefile, "-d", dest, "-t", timezones, "-s", "4326", "-g", "geom", "-c", "UTF-8"], check=True)
  subprocess.run(["spatialite", dest, f"SELECT CreateSpatialIndex('{timezones}', 'geom');"], check=True)
  subprocess.run(["spatialite", dest, "VACUUM;"], check=True)
  subprocess.run(["spatialite", dest, "ANALYZE;"], check=True)

  shutil.rmtree(Path(timezones_unzip_folder))

if __name__ == "__main__":
  args = parser.parse_args()

  if not args.config:
    LOGGER.critical("No valid config file used.")

    sys.exit(1)

  config = None
  with open(args.config) as f:
    config = json.load(f)

  timezones_sqlite_file = config["mjolnir"].get("timezone")
  if not timezones_sqlite_file:
    LOGGER.critical(f"'Can't find valid path for 'mjolnir.timezone' in {args.config}.")

    sys.exit(1)

  if args.force:
    download_file(args.url, Path(timezones_zip_file))
  else:
    if not Path(timezones_zip_file).exists():
      LOGGER.error("Timezone polygon file is not found")
  
      sys.exit(1)

  unzip_file(Path(timezones_zip_file), Path(timezones_unzip_folder))
  create_spatial_database(timezones_sqlite_file)
